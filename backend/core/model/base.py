# Contratos mÃ­nimos (RID + protocolos de Heap e Index)

from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Protocol

@dataclass(frozen=True)
class RID:
    page: int
    slot: int

class Heap(Protocol):
    def insert(self, row: Dict[str, Any]) -> RID: ...
    def read(self, rid: RID) -> Dict[str, Any]: ...
    def delete(self, rid: RID) -> bool: ...
    def iter_rids(self): ...
    def iter_rows(self): ...
    def scan_eq(self, col: str, key: Any): ...
    def scan_range(self, col: str, lo: Any, hi: Any): ...

class Index(Protocol):
    name: str
    key_col: str
    def insert(self, key: Any, rid: RID) -> None: ...
    def search(self, key: Any) -> List[RID]: ...
    def range_search(self, lo: Any, hi: Any) -> List[RID]: ...
    def delete(self, key: Any, rid: Optional[RID] = None) -> int: ...
